#!/bin/bash

# required global vars:
# RUNNER_TOOL_CACHE         # provided by action
# RUNNER_WORKSPACE          # provided by action
# GO_VERSION=               # version constraint
#
# optional vars:
# INSTALL_GO_FORCE          # set to non-empty to force the install

set -e
[ -n "$DEBUG" ] && set -x

CDPATH="" cd -- "$(dirname -- "$(dirname -- "$0")")"

. src/lib

run_install_go_fn="${run_install_go_fn:-"run_install_go"}"

debug_out starting run

export INSTALL_GO_TIP

# shellcheck disable=2153 # false positive about GO_VERSION being a misspelling of go_version
constraint="$GO_VERSION"
if [ "$constraint" = "tip" ] || [ "$constraint" = "gotip" ]; then
  constraint='*'
  INSTALL_GO_TIP=1
fi

install_parent="$RUNNER_WORKSPACE/setup-go-faster/go"
mkdir -p "$install_parent"

go_tool_cache="$RUNNER_TOOL_CACHE/go"
mkdir -p "$go_tool_cache"

all_locals=""

if [ -z "$IGNORE_LOCAL_GO" ]; then
  all_locals="$(ls "$go_tool_cache")
$(ls "$install_parent")"
fi

if is_precise_version "$constraint"; then
  lv="$constraint"
else
  lv="$(select_go_version "$constraint" "$all_locals")"
fi

if [ -z "$lv" ]; then
  echo "::error ::No go version found matching '$GO_VERSION'"
  exit 1
fi

if [ -z "$IGNORE_LOCAL_GO" ] && [ -d "$go_tool_cache/$lv/x64" ]; then
  target_dir="$go_tool_cache/$lv/x64"
else
  target_dir="$install_parent/$lv/x64"
fi

"$run_install_go_fn" "$lv" "$target_dir" "$install_parent/tip/x64"
