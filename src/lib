#!/bin/bash

set -e

CDPATH="" cd -- "$(dirname -- "$(dirname -- "$0")")"

goos() {
  case "$RUNNER_OS" in
  macOS)
    echo "darwin"
    ;;
  Linux)
    echo "linux"
    ;;
  Windows)
    echo "windows"
    ;;
  *)
    uname -s | tr '[:upper:]' '[:lower:]'
    ;;
  esac
}

debug_out() {
  if [ -n "$DEBUG" ]; then
    echo "$@" >&2
  fi
}

homedir() {
  if [ "$(goos)" = "windows" ]; then
    echo "$USERPROFILE"
  else
    echo "$HOME"
  fi
}

sdk_dir() {
  echo "$(homedir)/sdk"
}

extension() {
  if [ "$(goos)" = "windows" ]; then
    echo ".zip"
  else
    echo ".tar.gz"
  fi
}

version_archive_name() {
  local version="$1"
  echo "$version.$(goos)-amd64$(extension)"
}

init_tmpdir() {
  local tmpdir="$RUNNER_WORKSPACE"
  tmpdir="${tmpdir:-"$TMPDIR"}"
  tmpdir="$tmpdir/setup-go-faster/tmp"
  mkdir -p "$tmpdir"
  rm -rf "$tmpdir"
  mkdir -p "$tmpdir"
  trap 'rm -rf "$tmpdir"' EXIT
  echo "$tmpdir"
}

download_go_url() {
  local go_version="$1"
  archive_name="$(version_archive_name go"$go_version")"
  echo "https://storage.googleapis.com/golang/$archive_name"
}

install_go() {
  local go_version="$1"
  local target_dir="$2"
  rm -rf "$target_dir"
  mkdir -p "$(dirname "$target_dir")"
  tmpdir="$(init_tmpdir)"
  cd "$tmpdir"

  archive_name="$(version_archive_name go"$go_version")"

  # 4 retries is 15 seconds of waiting
  curl -s --retry 4 --fail -O "$(download_go_url "$go_version")"

  set -x
  pwd
  if [ "$(extension)" = ".zip" ]; then
    time 7z x "$archive_name"
  else
    time tar -xzf "$archive_name"
  fi
  time mv "go" "$target_dir"
  set +x

  cd - >/dev/null
}

add_to_system_path() {
  element="$1"
  if [ "$(goos)" == "windows" ]; then
    element="$(echo "/$element" | sed -e 's|\\|/|g' | sed 's/://')"
  fi
  echo "$element:$PATH"
}

add_to_github_path() {
  element="$1"
  if [ "$(goos)" == "windows" ]; then
    element="$(echo "/$element" | sed -e 's|\\|/|g' | sed 's/://')"
  fi
  echo "$element" >>"$GITHUB_PATH"
}

exe_name() {
  suffix=""
  [ "$(goos)" = "windows" ] && suffix=".exe"
  echo "$1$suffix"
}

is_precise_version() {
  [[ $1 =~ ^[0-9]+(.[0-9]+(.[0-9]+)?)?([A-Za-z0-9]+)?$ ]] && return
  return 1
}

select_go_version() {
  local constraint="$1"
  local versions="$2"
  local got
  got="$(echo "$versions" | ./src/select_go_version.pl "$constraint")" || return
  echo "$got"
}

select_local_version() {
  local constraint="$1"
  local go_tool_cache="$2"
  local local_versions
  local_versions="$(ls "$go_tool_cache")"

  # return any exact matches first for fastest possible result
  for v in $local_versions; do
    if [ "$v" = "$constraint" ]; then
      echo "$v" && return
    fi
  done

  # handle the 1.x type constraint
  if ver="$(select_go_version "$constraint" "$local_versions")"; then
    if [ -n "$ver" ]; then
      echo "$ver" && return
    fi
  fi

  # handle other constraints
  local_matches="$(echo "$local_versions" | ./src/semver-select -c "$constraint" -n 1 -i -)"
  if [ -n "$local_matches" ]; then
    echo "$local_matches" | tail -1
  fi
}

select_remote_version() {
  local constraint="$1"
  local dl_json="$2"
  jq_parsed="$(echo "$dl_json" | jq -r '.[].version' | sed 's/^go//g')"

  if got="$(select_go_version "$constraint" "$jq_parsed")"; then
    echo "$got" && return
  fi
  echo "$jq_parsed" | ./src/semver-select -c "$GO_VERSION_CONSTRAINT" -n 1 -i -
}
