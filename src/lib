#!/bin/bash

set -e

CDPATH="" cd -- "$(dirname -- "$(dirname -- "$0")")"

goos() {
  case "$RUNNER_OS" in
  macOS)
    echo "darwin"
    ;;
  Linux)
    echo "linux"
    ;;
  Windows)
    echo "windows"
    ;;
  *)
    uname -s | tr '[:upper:]' '[:lower:]'
    ;;
  esac
}

debug_out() {
  if [ -n "$DEBUG" ]; then
    echo "$@" >&2
  fi
}

homedir() {
  if [ "$(goos)" = "windows" ]; then
    echo "$USERPROFILE"
  else
    echo "$HOME"
  fi
}

sdk_dir() {
  echo "$(homedir)/sdk"
}

extension() {
  if [ "$(goos)" = "windows" ]; then
    echo ".zip"
  else
    echo ".tar.gz"
  fi
}

version_archive_name() {
  local version="$1"
  echo "$version.$(goos)-amd64$(extension)"
}

init_tmpdir() {
  local tmpdir="$RUNNER_WORKSPACE"
  tmpdir="${tmpdir:-"$TMPDIR"}"
  tmpdir="$tmpdir/setup-go-faster/tmp"
  mkdir -p "$tmpdir"
  rm -rf "$tmpdir"
  mkdir -p "$tmpdir"
  trap 'rm -rf "$tmpdir"' EXIT
  echo "$tmpdir"
}

download_go_url() {
  local go_version="$1"
  archive_name="$(version_archive_name go"$go_version")"
  echo "https://storage.googleapis.com/golang/$archive_name"
}

# just a helper func to call src/install-go that can be overridden for testing
run_install_go() {
  src/install-go "$@"
}

install_go() {
  local go_version="$1"
  local target_dir="$2"
  rm -rf "$target_dir"
  mkdir -p "$(dirname "$target_dir")"
  tmpdir="$(init_tmpdir)"
  cd "$tmpdir"

  archive_name="$(version_archive_name go"$go_version")"

  # 4 retries is 15 seconds of waiting
  curl -s --retry 4 --fail -O "$(download_go_url "$go_version")"

  pwd
  if [ "$(extension)" = ".zip" ]; then
    7z x "$archive_name"
  else
    tar -xzf "$archive_name"
  fi
  mv "go" "$target_dir"

  cd - >/dev/null
}

add_to_system_path() {
  element="$1"
  if [ "$(goos)" == "windows" ]; then
    element="$(echo "/$element" | sed -e 's|\\|/|g' | sed 's/://')"
  fi
  echo "$element:$PATH"
}

add_to_github_path() {
  element="$1"
  if [ "$(goos)" == "windows" ]; then
    element="$(echo "/$element" | sed -e 's|\\|/|g' | sed 's/://')"
  fi
  echo "$element" >>"$GITHUB_PATH"
}

exe_name() {
  suffix=""
  [ "$(goos)" = "windows" ] && suffix=".exe"
  echo "$1$suffix"
}

is_precise_version() {
  [[ $1 =~ ^[0-9]+(.[0-9]+(.[0-9]+)?)?([A-Za-z0-9]+)?$ ]] && return
  return 1
}

select_go_version() {
  local constraint="$1"
  local versions="$2"
  gvs_result="$(call_goversion_select "$constraint" "$versions")"
  body="$(echo "$gvs_result" | jq -r '.body')"
  status_code="$(echo "$gvs_result" | jq -r '.status_code')"
  if [ "$status_code" != "200" ]; then
    return 1
  fi
  # remove the go prefix
  ver="${body#"go"}"
  echo "$ver"
}

call_goversion_select() {
  local constraint="$1"
  local versions="$2"
  versions="$(echo "$versions" | tr '\n' ',' | sed 's/,*$//g')"

  url="https://willabides.azurewebsites.net/api/goversion_select"
  resp="$(curl --retry 4 -s -G \
    --data-urlencode "constraint=$constraint" \
    --data-urlencode "candidates=$versions" \
    "$url" -w "\n%{http_code}")"
  body="$(echo "$resp" | head -1)"
  status_code="$(echo "$resp" | tail -1)"
  jq -n --arg body "$body" --arg status_code "$status_code" \
    '{
       "body": $body,
       "status_code": $status_code
      }'
}
